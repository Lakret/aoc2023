<!-- livebook:{"persist_outputs":true} -->

# Day 12

## Solution

```elixir
__DIR__
```

<!-- livebook:{"output":true} -->

```
"/Users/lakret/mine/aoc2023"
```

```elixir
input = Path.join(__DIR__, "inputs/d12") |> File.read!()
```

<!-- livebook:{"output":true} -->

```
".???##?????????#?.?? 1,12\n#####??.?????? 7,1\n#.???#???.#? 1,2,1,1\n?#???#?..???# 2,1,1,1\n?#..???.#?.?.. 1,2,2,1\n?#?????#?#??#?????# 2,1,8,1,1\n?#???????? 1,4,1\n#???#??#?##.???? 1,1,7,1,1\n?#?.#???#?###??? 2,3,8\n.??#????#. 3,1\n??#.??#??#?? 1,1,2,1\n?#??#?#??.?.#.#?? 8,1,1,3\n????###??#.???#..?? 7,3,1\n.##????.?? 3,2,1\n#.#???#?##??.????.? 1,2,7,1,2\n.#?.??#?????.??.?? 2,8,1\n#???..?.?. 3,1\n????#?#???..??? 1,6\n?????#???.??.???? 6,1,1,1,2\n?..?.#????#?###?#? 1,1,1,10\n.#??#?????#. 4,5\n.?????????. 1,4\n.??.?.#?#??. 1,4\n??##???.#???#??.? 5,3,2,1\n?#????#??.? 1,4,1\n#??#.??###???. 4,5,1\n?#?.#??.???# 3,2,3\n?#??.???#??? 1,1,5\n???.#????.? 2,4,1\n???#?.#??#???#?.?# 1,1,1,1,3,1\n???.#???.?#???? 1,1,3,2,1\n.#??##????. 5,2\n?????#???????.??? 3,4,1,1,3\n?...???####????#? 1,13\n.?##?#????????#???. 6,6\n???.?#???? 2,3,1\n.????????#???? 5,3,1\n..?#??..??.?? 4,1,1\n.?#???.?#? 2,1,1\n#??..???????#? 2,1,5\n??#????..??.???. 3,1,1,1\n..#??.????? 3,3\n.#?????#?..?.#?? 2,1,3,1,1\n##???..????? 4,2\n???????????#.? 1,5\n.#?#???????#???? 3,1,5,1,1\n?????#?????. 2,2,1\n?.?????###?? 2,4\n???????#???#?????? 1,1,7,1,1\n?#????##?????????? 9,1,1,1\n???????.??#????#? 6,2,1,1\n?#???..??????? 4,3,1\n.#?????#?# 4,4\n???????.???????. 2,3,2,3\n????#?#????????.??# 12,1,1,1\n.##..?.?##?#?.?.# 2,4,1,1\n#?##??#??.# 8,1\n?????.??#????? 1,1,6\n??.?..?#?.??. 1,2,2\n????#??..????? 2,1\n?.#???##???.? 1,1,2,1\n????????#?? 1,1,4\n?#???.??###????.? 4,5,1\n??.?.??#?#.???#???? 1,1,1,3,6,1\n.???#????????? 1,7\n?###????#?????.?#. 4,8,2\n?#?????????? 8,1\n?.#?#???###?.???? 1,8,1\n????#?.#???????.?? 1,8\n#????????.?#??# 2,1,1,2,1\n?.??.??#..?#.??? 1,1,2,2,2\n?????.#??.?? 1,3\n##??.?###????? 4,7\n?.?#?###??? 1,2,3\n.?????.???#? 2,4\n.??#.?##???#?? 1,5,1\n?##.??#????#???????# 3,5,1,1,1,2\n#??#???#.???###???? 1,1,2,5,1,1\n??.??.?????##?.?? 1,1,5,2\n.#??.??#???##?#.?#? 1,1,2,2,1,2\n??????####??##..?? 14,1\n????.??#?????#??... 1,1,6,1,1\n??#?.??.#.. 3,1\n.#?#????????.. 5,4\n???#?????#??#? 2,7\n????#?????#?#??#.? 8,1,1,1,1\n?#?????##.?????????? 9,1,1,1\n?#????.??#?#.??.# 1,1,5,1,1\n?????#?..? 1,3\n?.???#?#????##? 8,3\n???..?..??#?.#??##?. 2,1,4,6\n?###??.?#?#?????? 5,4,2\n?..##???????????? 4,5\n.??#.????????#..???? 1,6\n?###??????.????? 10,3\n?.#.??.?????#..??. 1,2,2,1,1,1\n??#???????#.# 8,1,1\n??.#?...?#????? 1,1,2,4\n.??????#????? 8,2\n?#?#??..??.??# 3,1,3\n.?????.????. 1,2\n?????..??????? 1,2,3,1\n..#?.??#.##??#??? 1,1,1,6\n????.?.?..? 2,1,1\n.#???.??.??? 1,1,1,1\n?.???#..??????? 1,3,6\n.?#.??..?? 1,1,1\n????????.#? 3,1\n???#?????? 1,2,2\n???#####???#?.?#.??. 12,1\n????..??.? 2,1\n.???????.???? 3,1,2,1\n??#?#???#??#??.???. 8,1,1,3\n?????###.???? 8,2\n.??..?.?#?? 2,3\n#?.????..? 1,2,1\n??????????##.#?#. 1,8,1,1\n.#????##??.?.#?? 1,1,4,1,2\n?###???.??.???.? 3,1,1,1,1\n.#?.?#???????? 2,1,2,3\n#???#?##???#?#??. 8,5\n.?#???????????.#?#? 4,2,3\n?##.??..??? 2,1\n?..???????????? 1,2,2,1,1\n.#?.??#??? 2,2\n???.???.???..#????? 2,2,1,1,3,1\n?#??????#. 3,4\n?.????#?#?????# 7,5\n??#????.?#??.. 2,2,3\n.#?????#??#??#??.?? 1,4,1,2,1,2\n???..?#???? 3,1,1\n#??#??????...?? 1,1,3,1,1\n?#??.?..#??????# 4,3,4\n??.??.??????.? 2,3,1\n..#?..?#???. 1,2\n.?????#?.? 3,1\n?#??#??#?#?#.??? 1,9\n##???.????.?#??.??? 4,1,1,3,1\n.?.?.?.????????? 1,1,4,1\n??.#????#.???##???.? 1,3,1,1,5,1\n#.??#?.?.?..? 1,2,1,1\n???.#?.???. 1,2,2\n?..#?.?#??????? 1,2,6\n#?.?##?#?? 1,3,1\n#?#.???#?#???.? 3,5,2,1\n##..?.????##?#?#???? 2,1,1,9,1\n.?#????.???? 2,4\n???..###?#??# 2,5,2\n#???.????#??? 4,2,1,1\n..?#??????..? 2,4\n??...????#.?? 1,3,1,1\n?.??##?#???.??????? 6,7\n???#?.?????#? 1,1,1,1\n??#?????????.??#?.?? 1,1,2,4,3\n?????#?#??#??????? 1,4,1,6,1\n?#???#.?#??? 2,1,1,3\n?##.??#?????.???. 2,3,3\n??#????.??? 1,5,1\n??##?????????????? 3,3,1,5\n???.?##????? 1,5,1\n?#??#.???#?????## 1,1,6,3\n.?.??#?.???#?? 2,4\n???##???.??????#???? 7,1,1,5\n??????#????.?..? 3,1,3,1,1\n?#??##???.???#.????# 7,1,1,1,1,1\n???????#.??? 1,6,2\n.#.?#?.?#? 1,1,1\n?#???#????#?.#?????? 10,1,2,1\n.?#?####??#???????. 6,9\n#?..?#.?#?#????#? 1,2,8\n.??#?##?.????#??#. 2,2,8\n????#..???????? 1,1,2,2\n??#???#..?##????? 1,2,1,8\n.????????##???. 6,4\n????#?...??.?.?#.# 5,1,1,1,1\n??.?????..#?? 1,1,1,3\n?????.???? 3,1\n.????????.??.???? 1,4,2,1,1\n?#??#???.????????? 7,2,2\n???#????.#.??##??? 4,1,4\n#??##..#?????. 1,2,2,1\n???????#??" <> ...
```

```elixir
defmodule D12 do
  def parse_input(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      [states, damaged] = String.split(line)

      damaged =
        damaged
        |> String.split(",")
        |> Enum.map(&String.to_integer/1)

      {states, damaged}
    end)
  end

  def solve("", []), do: 1
  def solve("", [0]), do: 1
  def solve(".", []), do: 1
  def solve(".", [0]), do: 1
  def solve("", _), do: 0
  def solve(_, []), do: 0

  def solve(<<"?", rest::binary>>, damaged) do
    IO.inspect("? matched: #{rest}")
    solve("#" <> rest, damaged) + solve("." <> rest, damaged)
  end

  def solve(<<".", rest::binary>>, damaged), do: solve(rest, damaged)

  def solve(<<a::utf8, b::utf8, rest::binary>>, [springs | damaged]) do
    case {a, b, springs} do
      {"#", ".", 1} ->
        solve(rest, damaged)

      {"#", "#", 1} ->
        0

      {"#", "?", 1} ->
        solve("." <> rest, damaged)

      {".", b, springs} ->
        solve(b <> rest, springs)

      {a, b, springs} ->
        IO.inspect({to_string(a), to_string(b), rest, springs}, label: :unmatched)
    end
  end

  def solve(x, y) do
    IO.inspect({x, y}, label: :unmatched)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, D12, <<70, 79, 82, 49, 0, 0, 15, ...>>, {:solve, 2}}
```

```elixir
input = input |> D12.parse_input()
```

<!-- livebook:{"output":true} -->

```
[
  {".???##?????????#?.??", [1, 12]},
  {"#####??.??????", [7, 1]},
  {"#.???#???.#?", [1, 2, 1, 1]},
  {"?#???#?..???#", [2, 1, 1, 1]},
  {"?#..???.#?.?..", [1, 2, 2, 1]},
  {"?#?????#?#??#?????#", [2, 1, 8, 1, 1]},
  {"?#????????", [1, 4, 1]},
  {"#???#??#?##.????", [1, 1, 7, 1, 1]},
  {"?#?.#???#?###???", [2, 3, 8]},
  {".??#????#.", [3, 1]},
  {"??#.??#??#??", [1, 1, 2, 1]},
  {"?#??#?#??.?.#.#??", [8, 1, 1, 3]},
  {"????###??#.???#..??", [7, 3, 1]},
  {".##????.??", [3, 2, 1]},
  {"#.#???#?##??.????.?", [1, 2, 7, 1, 2]},
  {".#?.??#?????.??.??", [2, 8, 1]},
  {"#???..?.?.", [3, 1]},
  {"????#?#???..???", [1, 6]},
  {"?????#???.??.????", [6, 1, 1, 1, 2]},
  {"?..?.#????#?###?#?", [1, 1, 1, 10]},
  {".#??#?????#.", [4, 5]},
  {".?????????.", [1, 4]},
  {".??.?.#?#??.", [1, 4]},
  {"??##???.#???#??.?", [5, 3, 2, 1]},
  {"?#????#??.?", [1, 4, 1]},
  {"#??#.??###???.", [4, 5, 1]},
  {"?#?.#??.???#", [3, 2, 3]},
  {"?#??.???#???", [1, 1, 5]},
  {"???.#????.?", [2, 4, 1]},
  {"???#?.#??#???#?.?#", [1, 1, 1, 1, 3, 1]},
  {"???.#???.?#????", [1, 1, 3, 2, 1]},
  {".#??##????.", [5, 2]},
  {"?????#???????.???", [3, 4, 1, 1, 3]},
  {"?...???####????#?", [1, 13]},
  {".?##?#????????#???.", [6, 6]},
  {"???.?#????", [2, 3, 1]},
  {".????????#????", [5, 3, 1]},
  {"..?#??..??.??", [4, 1, 1]},
  {".?#???.?#?", [2, 1, 1]},
  {"#??..???????#?", [2, 1, 5]},
  {"??#????..??.???.", [3, 1, 1, 1]},
  {"..#??.?????", [3, 3]},
  {".#?????#?..?.#??", [2, 1, 3, 1, 1]},
  {"##???..?????", [4, 2]},
  {"???????????#.?", [1, 5]},
  {".#?#???????#????", [3, 1, ...]},
  {"?????#?????.", [2, ...]},
  {"?.?????###??", [...]},
  {"???????#???#??????", ...},
  {...},
  ...
]
```

```elixir
D12.solve("?###????????", [3, 2, 1])
```

<!-- livebook:{"output":true} -->

```
"matched: ###????????"
unmatched: {"35", "35", "##????????", 3}
unmatched: {"35", "35", "#????????", 3}
```

```elixir
:timer.tc(fn ->
  # String.to_integer("0110011", 2) 
  ["0", "1", "1", "0", "0", "1", "1"] |> Enum.join() |> String.to_integer(2)
end)
```

<!-- livebook:{"output":true} -->

```
{7, 51}
```

```elixir
defmodule D12 do
  @char_to_is_damaged %{"?" => nil, "." => false, "#" => true}

  def parse_input(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      [states, damaged] = String.split(line)

      states =
        String.graphemes(states)
        |> Enum.map(&@char_to_is_damaged[&1])

      damaged =
        damaged
        |> String.split(",")
        |> Enum.map(&String.to_integer/1)

      {states, damaged}
    end)
  end

  def solve(states, damaged) when is_list(states) and is_list(damaged) do
    find_bounds(states, damaged)
    |> Enum.filter(&fits?(&1, states, damaged))
    |> length()
  end

  def find_bounds(states, damaged) do
    IO.inspect({states, damaged})

    min_possible_states =
      states
      |> Enum.map(fn
        nil -> "0"
        true -> "1"
        false -> "0"
      end)
      |> Enum.join()
      |> String.to_integer(2)

    max_possible_states =
      states
      |> Enum.map(fn
        nil -> "1"
        true -> "1"
        false -> "0"
      end)
      |> Enum.join()
      |> String.to_integer(2)

    min_possible_damaged =
      damaged
      |> Enum.intersperse(0)
      |> Enum.map(fn damaged_group_length ->
        if damaged_group_length == 0 do
          "0"
        else
          String.duplicate("1", damaged_group_length)
        end
      end)
      |> Enum.join()
      |> String.to_integer(2)

    # [least | greater] = Enum.reverse(damaged)
    # greater = 
    #   greater
    #   |> Enum.reverse()
    #   |> Enum.intersperse(0)
    #   |> Enum.map(fn damaged_group_length -> 
    #     if damaged_group_length == 0 do
    #       "0"
    #     else
    #       String.duplicate("1", damaged_group_length)
    #     end
    #   end)
    #   |> Enum.join()
    # max_zeros_to_add = length(states) - String.length(greater) - least
    # max_possible_damaged = 
    #   [greater, String.duplicate("0", max_zeros_to_add), String.duplicate("1", least)] 
    #   |> IO.inspect(label: :max_possible_damaged_num)
    #   |> Enum.join() 
    #   |> String.to_integer(2)

    max_possible_damaged =
      damaged
      |> Enum.map(&String.duplicate("1", &1))
      |> Enum.intersperse("0")
      |> Enum.join()

    padding_length = length(states) - String.length(max_possible_damaged)
    max_possible_damaged = max_possible_damaged <> String.duplicate("0", padding_length)
    max_possible_damaged = String.to_integer(max_possible_damaged, 2)

    # IO.inspect(
    #   {min_possible_states, max_possible_states, min_possible_damaged, max_possible_damaged}
    # )

    min_number = max(min_possible_states, min_possible_damaged)
    max_number = min(max_possible_states, max_possible_damaged)
    min_number..max_number
  end

  def fits?(number, states, damaged) do
    bits = number_to_states(number, length(states))

    bits_match_states =
      Enum.zip([Enum.reverse(states), Enum.reverse(bits)])
      |> Enum.all?(fn
        {nil, _bit} -> true
        {true, true} -> true
        {false, false} -> true
        _ -> false
      end)

    # IO.inspect(bits_match_states, label: :bits_match_states)

    if bits_match_states do
      damaged_groups =
        Enum.chunk_by(bits, fn bit -> bit end)
        |> Enum.flat_map(fn
          [false | _] -> []
          [true | _] = damaged_group -> [length(damaged_group)]
        end)

      # IO.inspect(damaged_groups, label: :damaged_groups)
      damaged_groups == damaged
    else
      false
    end
  end

  # TODO: this needs to fit the actual pattern, currently it works for #1 but breaks on #2
  # gotta move 1s to the leftmost position of each available nil group
  #
  # Idea: work with {prev_group, this_unknown_group, next_group} to figure out how we can 
  # maximize the numbers
  # Idea #2: infer max padding from the states
  def number_to_states(number, expected_length) do
    binary = Integer.to_string(number, 2)

    padding = expected_length - String.length(binary)

    String.pad_leading(binary, padding, "0")
    |> String.graphemes()
    |> Enum.map(fn
      "0" -> false
      "1" -> true
    end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, D12, <<70, 79, 82, 49, 0, 0, 25, ...>>, {:number_to_states, 2}}
```

```elixir
test_input = """
???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1
"""
```

<!-- livebook:{"output":true} -->

```
"???.### 1,1,3\n.??..??...?##. 1,1,3\n?#?#?#?#?#?#?#? 1,3,1,6\n????.#...#... 4,1,1\n????.######..#####. 1,6,5\n?###???????? 3,2,1\n"
```

```elixir
test_input = D12.parse_input(test_input)
```

<!-- livebook:{"output":true} -->

```
[
  {[nil, nil, nil, false, true, true, true], [1, 1, 3]},
  {[false, nil, nil, false, false, nil, nil, false, false, false, nil, true, true, false],
   [1, 1, 3]},
  {[nil, true, nil, true, nil, true, nil, true, nil, true, nil, true, nil, true, nil], [1, 3, 1, 6]},
  {[nil, nil, nil, nil, false, true, false, false, false, true, false, false, false], [4, 1, 1]},
  {[nil, nil, nil, nil, false, true, true, true, true, true, true, false, false, true, true, true,
    true, true, false], [1, 6, 5]},
  {[nil, true, true, true, nil, nil, nil, nil, nil, nil, nil, nil], [3, 2, 1]}
]
```

```elixir
test_answers =
  test_input
  |> Enum.map(fn {states, damaged} -> D12.solve(states, damaged) end)
```

<!-- livebook:{"output":true} -->

```
{[nil, nil, nil, false, true, true, true], [1, 1, 3]}
{[false, nil, nil, false, false, nil, nil, false, false, false, nil, true, true,
  false], [1, 1, 3]}
{[nil, true, nil, true, nil, true, nil, true, nil, true, nil, true, nil, true,
  nil], [1, 3, 1, 6]}
{[nil, nil, nil, nil, false, true, false, false, false, true, false, false,
  false], [4, 1, 1]}
{[nil, nil, nil, nil, false, true, true, true, true, true, true, false, false,
  true, true, true, true, true, false], [1, 6, 5]}
{[nil, true, true, true, nil, nil, nil, nil, nil, nil, nil, nil], [3, 2, 1]}
```

<!-- livebook:{"output":true} -->

```
[1, 4, 1, 1, 4, 10]
```

```elixir
Enum.sum(test_answers)
```

<!-- livebook:{"output":true} -->

```
21
```

```elixir
input = File.read!("inputs/d12")
input = D12.parse_input(input)
```

<!-- livebook:{"output":true} -->

```
[
  {[false, nil, nil, nil, true, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, false,
    nil, nil], [1, 12]},
  {[true, true, true, true, true, nil, nil, false, nil, nil, nil, nil, nil, nil], [7, 1]},
  {[true, false, nil, nil, nil, true, nil, nil, nil, false, true, nil], [1, 2, 1, 1]},
  {[nil, true, nil, nil, nil, true, nil, false, false, nil, nil, nil, true], [2, 1, 1, 1]},
  {[nil, true, false, false, nil, nil, nil, false, true, nil, false, nil, false, false],
   [1, 2, 2, 1]},
  {[nil, true, nil, nil, nil, nil, nil, true, nil, true, nil, nil, true, nil, nil, nil, nil, nil,
    true], [2, 1, 8, 1, 1]},
  {[nil, true, nil, nil, nil, nil, nil, nil, nil, nil], [1, 4, 1]},
  {[true, nil, nil, nil, true, nil, nil, true, nil, true, true, false, nil, nil, nil, nil],
   [1, 1, 7, 1, 1]},
  {[nil, true, nil, false, true, nil, nil, nil, true, nil, true, true, true, nil, nil, nil],
   [2, 3, 8]},
  {[false, nil, nil, true, nil, nil, nil, nil, true, false], [3, 1]},
  {[nil, nil, true, false, nil, nil, true, nil, nil, true, nil, nil], [1, 1, 2, 1]},
  {[nil, true, nil, nil, true, nil, true, nil, nil, false, nil, false, true, false, true, nil, nil],
   [8, 1, 1, 3]},
  {[nil, nil, nil, nil, true, true, true, nil, nil, true, false, nil, nil, nil, true, false, false,
    nil, nil], [7, 3, 1]},
  {[false, true, true, nil, nil, nil, nil, false, nil, nil], [3, 2, 1]},
  {[true, false, true, nil, nil, nil, true, nil, true, true, nil, nil, false, nil, nil, nil, nil,
    false, nil], [1, 2, 7, 1, 2]},
  {[false, true, nil, false, nil, nil, true, nil, nil, nil, nil, nil, false, nil, nil, false, nil,
    nil], [2, 8, 1]},
  {[true, nil, nil, nil, false, false, nil, false, nil, false], [3, 1]},
  {[nil, nil, nil, nil, true, nil, true, nil, nil, nil, false, false, nil, nil, nil], [1, 6]},
  {[nil, nil, nil, nil, nil, true, nil, nil, nil, false, nil, nil, false, nil, nil, nil, nil],
   [6, 1, 1, 1, 2]},
  {[nil, false, false, nil, false, true, nil, nil, nil, nil, true, nil, true, true, true, nil, true,
    nil], [1, 1, 1, 10]},
  {[false, true, nil, nil, true, nil, nil, nil, nil, nil, true, false], [4, 5]},
  {[false, nil, nil, nil, nil, nil, nil, nil, nil, nil, false], [1, 4]},
  {[false, nil, nil, false, nil, false, true, nil, true, nil, nil, false], [1, 4]},
  {[nil, nil, true, true, nil, nil, nil, false, true, nil, nil, nil, true, nil, nil, false, nil],
   [5, 3, 2, 1]},
  {[nil, true, nil, nil, nil, nil, true, nil, nil, false, nil], [1, 4, 1]},
  {[true, nil, nil, true, false, nil, nil, true, true, true, nil, nil, nil, false], [4, 5, 1]},
  {[nil, true, nil, false, true, nil, nil, false, nil, nil, nil, true], [3, 2, 3]},
  {[nil, true, nil, nil, false, nil, nil, nil, true, nil, nil, nil], [1, 1, 5]},
  {[nil, nil, nil, false, true, nil, nil, nil, nil, false, nil], [2, 4, 1]},
  {[nil, nil, nil, true, nil, false, true, nil, nil, true, nil, nil, nil, true, nil, false, nil,
    true], [1, 1, 1, 1, 3, 1]},
  {[nil, nil, nil, false, true, nil, nil, nil, false, nil, true, nil, nil, nil, nil],
   [1, 1, 3, 2, 1]},
  {[false, true, nil, nil, true, true, nil, nil, nil, nil, false], [5, 2]},
  {[nil, nil, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, false, nil, nil, ...],
   [3, 4, 1, 1, 3]},
  {[nil, false, false, false, nil, nil, nil, true, true, true, true, nil, nil, nil, nil, ...],
   [1, 13]},
  {[false, nil, true, true, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, ...], [6, 6]},
  {[nil, nil, nil, false, nil, true, nil, nil, nil, nil], [2, 3, 1]},
  {[false, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, nil, ...], [5, 3, 1]},
  {[false, false, nil, true, nil, nil, false, false, nil, nil, false, ...], [4, 1, 1]},
  {[false, nil, true, nil, nil, nil, false, nil, true, nil], [2, 1, 1]},
  {[true, nil, nil, false, false, nil, nil, nil, nil, ...], [2, 1, 5]},
  {[nil, nil, true, nil, nil, nil, nil, false, ...], [3, 1, 1, 1]},
  {[false, false, true, nil, nil, false, nil, ...], [3, 3]},
  {[false, true, nil, nil, nil, nil, ...], [2, 1, 3, 1, 1]},
  {[true, true, nil, nil, nil, ...], [4, 2]},
  {[nil, nil, nil, nil, ...], [1, 5]},
  {[false, true, nil, ...], [3, 1, ...]},
  {[nil, nil, ...], [2, ...]},
  {[nil, ...], [...]},
  {[...], ...},
  {...},
  ...
]
```

```elixir
# TODO: parallel
answers =
  input
  |> Task.async_stream(
    fn {states, damaged} -> D12.solve(states, damaged) end,
    timeout: :infinity
  )
  |> Enum.to_list()
```

<!-- livebook:{"output":true} -->

```
...
  false, nil], [3, 1, 6, 1]}
{[nil, nil, nil, nil, nil, nil, true, nil, true, false, nil, nil, true, nil,
  true, false, false], [2, 1, 2, 1, 5]}
{[nil, true, nil, nil, true, false, nil, false, nil, nil, true, true, true, nil,
  nil, nil, true, true, nil, nil], [2, 1, 1, 4, 6]}
{[true, nil, false, false, false, nil, true, nil, true, false], [1, 4]}
{[true, nil, nil, true, nil, nil, nil, nil, true, nil, false, nil, nil, false,
  nil, nil, nil, false], [1, 7, 2, 3]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, nil, false, nil,
  false], [1, 8, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, true, nil, nil, false, nil, false,
  nil, nil, true, false, nil, nil], [7, 2]}
{[nil, nil, true, nil, nil, true, nil, false, nil, nil, true, nil, nil, true,
  nil, nil, nil, true, nil], [4, 10]}
{[true, nil, true, false, nil, true, nil, nil, nil, nil, nil], [3, 2, 2]}
{[nil, nil, true, false, nil, nil, nil, nil, nil, false, nil, nil, nil, nil],
 [2, 1, 1, 2]}
{[false, nil, true, nil, nil, nil, false, true, nil, nil, nil, nil, true, nil,
  nil], [2, 6]}
{[nil, nil, nil, false, nil, false, true, true, nil, nil, false, nil, nil, nil,
  nil], [1, 2, 1, 1, 1]}
{[nil, nil, nil, nil, nil, nil, nil, true, true, true, false, true, false,
  false, true, nil, false], [2, 2, 3, 1, 2]}
{[nil, nil, true, nil, true, nil, nil, false, false, false, nil, true, false,
  false], [4, 1]}
{[nil, nil, false, false, nil, nil, nil, nil, nil, nil, nil, false, nil, false],
 [1, 1]}
{[nil, nil, nil, nil, true, nil, true, nil, nil, nil], [3, 3, 1]}
{[nil, nil, nil, nil, true, true, nil, nil, nil, nil], [2, 3, 2]}
{[nil, nil, false, true, nil, nil, false, nil, nil, nil, nil, nil, true, nil,
  true, nil], [1, 1, 1, 3, 1]}
{[false, nil, false, nil, nil, false, nil, nil, nil, false], [1, 2]}
{[nil, nil, false, nil, nil, true, nil, nil, nil, nil, nil, nil], [2, 2, 1]}
{[false, nil, nil, nil, nil, nil, true, false, nil, true, true, nil, nil, true,
  nil, true, nil, nil, true], [2, 1, 2, 4, 1]}
{[nil, nil, nil, true, nil, nil, nil, true, nil, nil, nil, true, false, nil,
  nil, false, true, nil, true, nil], [2, 7, 1, 3]}
{[nil, true, true, false, nil, false, nil, false, true, nil, nil, true, false,
  nil, true, nil, nil], [2, 1, 1, 2, 2]}
{[nil, nil, nil, nil, false, nil, true, true, false, nil, nil, false],
 [3, 2, 2]}
{[false, nil, true, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  true, true, nil, nil, false], [7, 1, 5]}
{[nil, nil, nil, nil, nil, nil, true, true, true, nil, true, nil, nil, nil],
 [3, 8]}
{[nil, nil, nil, nil, nil, true, nil, nil, true, false, nil, nil, nil, false,
  nil, true, nil, false, nil, false], [9, 1, 3]}
{[false, false, nil, nil, true, true, false, false, true, true, true, nil, true,
  nil, nil, nil], [3, 5, 1]}
{[false, true, true, nil, false, true, false, nil, nil, nil, false, nil],
 [2, 1, 1]}
{[false, false, true, true, nil, nil, true, nil, false, nil, nil, nil, true,
  nil, nil, nil, false], [5, 6]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, nil, nil,
  nil, true], [1, 5, 2, 2, 2]}
{[nil, nil, true, true, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, nil,
  nil, true, nil, nil], [1, 6, 1, 1, 1]}
{[false, true, nil, nil, nil, nil, nil, nil, nil, nil, true, false], [3, 1, 1]}
{[nil, true, nil, nil, nil, nil, nil, nil, nil, false, nil, nil, nil, nil, true],
 [2, 1, 1, 2, 1]}
{[nil, nil, false, nil, true, nil, nil, nil, nil, true, true, nil], [2, 4]}
{[true, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, true, nil,
  true, true, false, nil], [1, 1, 1, 1, 8, 1]}
{[nil, nil, false, true, nil, nil, nil, true, nil, nil, false, true, nil, false],
 [1, 4, 1]}
{[nil, false, nil, false, nil, nil, nil, nil, true, false, false, nil, nil],
 [1, 4]}
{[nil, nil, nil, nil, false, false, true, nil, nil, nil, nil, nil, nil, true,
  true, nil, nil, false, nil, false], [1, 1, 11]}
{[nil, true, nil, nil, nil, nil, false, nil, false, nil], [4, 1, 1]}
{[true, nil, nil, nil, nil, nil, true, nil, nil, nil, nil, true, nil, nil,
  false, nil, nil, nil, false, nil], [1, 1, 7, 1, 1]}
{[false, nil, nil, false, true, nil, false, true, nil, nil, nil, nil, true,
  false, true, nil, nil, nil, nil], [1, 2, 6, 1, 1]}
{[nil, nil, true, nil, nil, nil, true, nil, nil, nil], [5, 1]}
{[nil, nil, nil, nil, nil, nil, true, false, nil, nil, nil, nil, nil, nil],
 [6, 1]}
{[nil, true, nil, nil, nil, nil, nil, nil, true, nil, true, false, nil, false,
  false], [1, 4]}
{[false, nil, nil, nil, nil, nil, false, nil, nil, false, false, nil, nil, nil,
  true, nil, nil, nil, nil], [3, 1, 6]}
{[nil, true, nil, false, nil, nil, true, nil, true, nil, true, nil, nil, true,
  false, nil, nil, false], [1, 1, 8, 1]}
{[nil, nil, nil, false, true, false, nil, nil, false, nil, nil, nil, true, nil,
  nil, nil], [3, 1, 1, 6]}
{[nil, nil, true, nil, true, nil, nil, nil, nil, false, nil, nil], [6, 1]}
{[nil, nil, nil, nil, nil, true, true, nil, nil, nil, nil, true, nil, true, nil,
  true, nil, nil, false], [4, 8]}
{[false, nil, true, nil, nil, nil, nil, nil, nil, nil, true, false, nil, true,
  false, nil, nil, true, nil, nil], [7, 1, 1, 1, 1, 1]}
{[nil, true, true, nil, true, nil, nil, true, false, nil, nil, true], [5, 1, 3]}
{[nil, false, true, nil, nil, nil, nil, nil, true, nil, nil, nil, nil, nil, nil,
  nil, true, true, nil, nil], [1, 2, 11]}
{[nil, nil, true, nil, nil, nil, true, nil, nil, false], [1, 3]}
{[false, nil, false, nil, nil, nil, true, nil, nil, nil, true, false, true, nil,
  false, false, nil], [1, 4, 1, 2]}
{[true, nil, nil, false, true, nil, nil, nil, nil, nil, nil, false],
 [1, 2, 1, 1]}
{[false, nil, nil, true, nil, true, true, true, nil, nil, nil, nil, true, nil],
 [1, 4, 3]}
{[nil, nil, false, nil, nil, nil, false, nil, false, nil, nil, nil, nil, false,
  nil], [1, 2]}
{[nil, false, nil, true, nil, nil, false, nil, nil, true, false, nil, nil],
 [3, 1, 1, 1]}
{[nil, true, false, nil, nil, nil, nil, true, nil, nil, nil, nil, false],
 [1, 4, 1, 1]}
{[false, nil, true, true, nil, nil, false, nil, false, nil, true, false, nil,
  true], [5, 1, 2, 1]}
{[nil, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, false, nil, true,
  true, nil, false], [10, 2]}
{[nil, nil, nil, false, nil, true, nil, nil, nil, false, nil, nil, nil, nil,
  true, true, true, nil, true], [1, 1, 2, 1, 8]}
{[nil, false, false, nil, true, nil, false, true, true, nil, nil], [2, 3]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, false, true, nil, nil,
  true, nil, true], [2, 1, 1, 1, 4, 1]}
{[nil, nil, nil, false, false, nil, nil, nil, false, nil, nil, nil, nil, true,
  nil], [1, 3]}
{[false, true, nil, nil, nil, true, nil, true, nil, true], [1, 5]}
{[nil, nil, nil, false, true, nil, false, true, nil, nil, true, nil, nil, true,
  true, false, nil, false, nil], [1, 1, 8]}
{[nil, nil, nil, nil, nil, nil, nil, nil, true, nil, nil, nil, nil, false, nil,
  true, nil, nil, nil, nil], [7, 5, 4]}
{[nil, nil, nil, false, nil, nil, nil, nil, true, nil, true, nil, nil],
 [1, 3, 4]}
{[nil, false, false, nil, true, nil, nil, nil, nil, nil, false, true, true, nil,
  nil], [6, 3]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, false, nil, nil, nil, nil, nil,
  nil, nil, nil], [1, 1, 4, 1, 2]}
{[nil, nil, nil, nil, true, nil, nil, true, nil, false, nil, nil, true, false,
  nil], [3, 1, 3]}
{[nil, nil, true, false, false, nil, nil, nil, nil, nil], [3, 3]}
{[nil, nil, true, false, nil, nil, true, nil, nil, nil, false, true, nil, nil,
  false], [3, 3, 1, 1]}
{[nil, nil, true, nil, false, nil, nil, nil, true, nil, nil, nil, nil, nil, nil],
 [1, 1, 7, 1]}
{[nil, nil, nil, nil, true, nil, nil, true, nil, false, nil, nil, nil, nil,
  false, nil, nil, true, nil, nil], [7, 1, 1, 1, 1]}
{[false, nil, nil, true, nil, nil, nil, true, nil, nil, true, nil, nil, nil,
  nil, nil, true, nil, nil], [2, 11]}
{[false, nil, true, nil, true, nil, true, nil, nil, nil], [3, 3]}
{[nil, nil, nil, nil, true, nil, nil, nil, true, true, false], [3, 2]}
{[false, nil, true, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil],
 [4, 6]}
{[false, nil, nil, false, nil, nil, nil, true, true, true, nil, false], [2, 5]}
{[nil, nil, false, nil, false, nil, nil, nil, nil, nil, true, nil, true, nil,
  nil, nil], [1, 8]}
{[nil, nil, nil, false, false, nil, nil, nil, true, nil, true, nil, false,
  false, nil, true, nil, nil], [3, 1, 1, 2, 2, 1]}
{[nil, nil, nil, nil, false, nil, true, nil, nil, nil, true, true, nil, true,
  true, nil], [1, 1, 1, 1, 5]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  nil, nil, true], [1, 1, 3, 1, 5, 1]}
{[true, nil, nil, true, false, nil, true, false, nil, false], [1, 1, 1]}
{[nil, nil, nil, nil, false, true, nil, nil, true, nil, nil, false, nil, nil,
  false, nil], [2, 4, 1]}
{[nil, nil, true, nil, true, false, nil, nil, nil, nil, nil, false], [1, 3, 4]}
{[true, nil, true, nil, nil, nil, true, nil, nil, nil, nil, nil, true, false,
  nil, nil], [1, 7, 1, 1]}
{[nil, true, nil, nil, nil, nil, nil, nil, true, nil, nil], [2, 1, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, false, true, true, true, false,
  nil, nil, nil, nil], [1, 5, 3, 1, 1]}
{[nil, nil, nil, nil, nil, nil, true, true, nil, nil, false, nil, true, false,
  nil, nil], [1, 7, 2, 1]}
{[nil, false, nil, nil, false, nil, nil, nil, nil, nil, nil, false, nil, nil,
  nil, nil], [1, 2, 2, 3]}
{[false, nil, nil, nil, nil, nil, nil, true, true, nil, nil, nil, false, false,
  nil, nil, true, true, nil], [8, 4]}
{[false, nil, nil, nil, false, nil, false, true, nil, nil, nil, nil, nil, nil,
  true, nil, nil, nil, true], [2, 1, 4, 7]}
{[nil, true, false, true, nil, nil, nil, nil, true, nil, nil, nil, nil],
 [1, 4, 5]}
{[nil, false, false, true, nil, nil, true, true, nil, nil, true, nil, false,
  nil, true, nil, true, nil, nil, nil], [1, 1, 2, 2, 4, 1]}
{[nil, nil, false, false, nil, nil, nil, nil, nil, nil, false, nil, nil],
 [1, 5]}
{[nil, nil, nil, false, nil, nil, nil, nil, true, false, nil, nil, true, nil,
  true, nil, nil, nil, nil, nil], [2, 1, 1, 10]}
{[nil, nil, nil, nil, nil, nil, nil, false, false, false, nil, true], [2, 1, 2]}
{[true, false, nil, true, nil, nil, true, nil, true, nil, true, nil, true, nil,
  false, nil, nil, nil], [1, 4, 1, 3, 1]}
{[false, nil, nil, true, nil, nil, false, true, nil, true], [4, 1, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, false, nil, nil, nil, nil,
  false, nil], [1, 4, 1, 1, 1]}
{[nil, nil, nil, nil, nil, false, nil, nil, nil, nil, true, nil, nil, nil],
 [3, 2, 2]}
{[nil, nil, nil, true, nil, nil, nil, nil, nil, nil, true, nil, nil, nil, nil,
  true, nil, nil, nil], [11, 1, 2]}
{[false, nil, false, true, nil, true, nil, true, false, nil, false], [1, 3]}
{[nil, nil, false, nil, nil, nil, nil, true, true, nil, nil, false, false, true],
 [1, 1, 4, 1]}
{[nil, nil, nil, nil, nil, true, nil, nil, true, true, nil, nil, false, nil,
  true, nil], [1, 10, 2]}
{[false, false, true, nil, nil, true, nil, nil, nil, nil, nil, nil], [4, 2]}
{[false, nil, true, nil, nil, false, nil, nil, nil, true, nil, nil], [3, 5]}
{[false, nil, nil, nil, nil, nil, false, nil, nil, nil], [1, 1, 2]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, false], [1, 1, 2]}
{[nil, nil, nil, false, nil, nil, nil, false, nil, true, nil, false, nil, nil,
  nil], [3, 1, 2, 1]}
{[nil, nil, nil, true, nil, nil, false, nil, true, nil, false, true, false, nil],
 [2, 1, 2, 1]}
{[false, true, nil, nil, nil, nil, true, nil, nil, nil, true, nil, nil, nil,
  nil, nil], [3, 2, 3, 3]}
{[nil, nil, nil, nil, nil, nil, true, nil, true, false, nil, nil, nil], [1, 4]}
{[nil, false, nil, nil, nil, nil, true, nil, nil, true, true, false], [1, 2, 5]}
{[nil, false, nil, nil, true, nil, true, false, nil, nil], [3, 1]}
{[nil, nil, nil, nil, true, nil, true, nil, nil, nil, nil, false, true, nil,
  nil, nil, true, nil, false, nil], [3, 4, 1, 6]}
{[nil, nil, nil, nil, true, nil, true, nil, true, nil, true, nil, true, nil,
  nil, true, nil, nil, false], '\t\b'}
{[nil, false, false, nil, true, false, false, true, true, true], [1, 1, 3]}
{[false, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, nil], [7, 1, 1]}
{[nil, false, nil, true, nil, nil, true, nil, nil, false, nil, nil, nil, nil,
  nil, nil], [3, 1, 1, 1, 1]}
{[nil, true, nil, nil, false, true, nil, true, nil, nil, nil, true, nil, nil,
  nil], [3, 1, 1, 3]}
{[nil, true, nil, false, nil, nil, nil, nil, true, nil, true, nil, nil, nil,
  false, nil], [2, 6, 1]}
{[nil, nil, false, nil, nil, nil, false, nil, nil, nil, nil, nil, nil],
 [1, 2, 2, 1]}
{[nil, true, nil, nil, false, false, nil, nil, nil, nil, nil, nil, true, nil,
  true], [2, 1, 2, 2, 1]}
{[nil, nil, true, nil, nil, nil, nil, nil, true, nil, nil, nil, true, nil, nil,
  nil, true, nil, true, nil], [12, 2, 1]}
{[nil, nil, true, nil, nil, nil, false, nil, true, nil, nil, nil], [1, 4, 2]}
{[nil, nil, nil, false, false, false, true, false, false, nil, true, nil, nil,
  nil], [3, 1, 3]}
{[true, true, nil, false, true, nil, true, nil, true, true, nil, nil, nil, nil,
  true, true, nil, nil, nil], [2, 6, 3, 1]}
{[false, true, nil, true, nil, false, nil, false, nil, nil, nil, true, nil,
  true, nil, true, true], [4, 8]}
{[true, true, nil, nil, false, nil, nil, nil, nil, nil, nil, true, false],
 [3, 6]}
{[nil, true, nil, nil, nil, false, false, true, false, true, false, nil, nil,
  true, true, nil, nil], [1, 1, 1, 1, 5]}
{[nil, nil, true, nil, nil, true, nil, true, nil, false, true, nil, false, true,
  nil, nil, true, nil, nil], [1, 7, 2, 1, 1, 1]}
{[false, nil, false, nil, nil, nil, nil, nil, nil, nil, true, true, nil, nil,
  false, nil, nil], [1, 2, 3, 2]}
{[nil, nil, true, nil, nil, nil, nil, true, nil, nil, nil, nil, false, nil, nil,
  false], [8, 1, 1]}
{[nil, nil, nil, true, nil, false, nil, true, nil, nil, nil, nil], [2, 2]}
{[nil, nil, nil, true, nil, true, nil, true, nil, nil, nil, nil, nil], [7, 2]}
{[nil, nil, nil, nil, false, nil, nil, nil, nil, nil], [3, 1]}
{[true, true, true, nil, true, nil, true, nil, nil, nil, nil, nil], [3, 4, 2]}
{[nil, nil, true, nil, true, nil, nil, true, false, nil, false, true, nil, true,
  nil, true, true, nil, false], [5, 2, 7]}
{[false, nil, nil, false, nil, nil, nil, true, false, false, nil, nil, nil,
  true, nil, nil, false, nil], [1, 1, 1, 5, 1]}
{[nil, true, nil, false, false, nil, nil, nil, false, nil], [1, 3]}
{[false, false, nil, true, true, nil, false, nil, nil, false, false, true, nil,
  true, nil, true, true, nil, true, nil], [3, 1, 9]}
{[nil, false, nil, nil, false, nil, true, true, nil, nil, false], [1, 3]}
{[nil, nil, nil, nil, true, nil, nil, nil, true, true, true, nil, nil, false,
  nil, true], [1, 1, 4, 2]}
{[true, nil, nil, true, false, false, false, nil, nil, nil, nil], [1, 1, 3]}
{[nil, nil, nil, nil, nil, false, false, true, nil, true], [4, 1, 1]}
{[nil, nil, true, nil, true, nil, false, nil, nil, false, false], [4, 1]}
{[false, false, nil, true, false, nil, nil, true, nil, nil], [2, 2]}
{[nil, nil, nil, false, nil, nil, nil, nil, nil, true, nil, nil, true, nil, nil],
 [1, 6, 2, 1]}
{[nil, nil, nil, false, true, nil, true, true, nil, nil, nil, true, nil, nil,
  nil], [2, 11]}
{[nil, nil, nil, true, nil, nil, nil, nil, true, nil, true, nil, nil, nil, nil,
  true, nil, nil, nil], [2, 9, 5]}
{[nil, nil, false, nil, nil, nil, false, nil, nil, nil, nil, nil, nil, nil],
 [1, 2]}
{[nil, nil, true, true, nil, false, false, false, nil, nil, nil, nil, true, nil,
  nil], [4, 4]}
{[nil, nil, true, nil, nil, true, nil, nil, nil, nil, nil], [5, 1]}
{[nil, true, true, false, nil, nil, false, nil, false, true, false, nil, false,
  nil], [2, 2, 1, 1]}
{[false, nil, true, false, nil, nil, true, nil, nil, nil, false, true, nil,
  true, nil, false, false, nil, nil], [2, 5, 3, 1]}
{[nil, true, nil, nil, nil, true, true, nil, nil, nil, nil, nil, true, nil],
 [9, 2]}
{[nil, nil, true, nil, nil, false, true, nil, true, nil, false, nil, nil, true],
 [4, 1, 1, 2]}
{[true, false, nil, true, nil, nil, nil, nil, nil, nil], [1, 1, 1]}
{[nil, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, false, nil, nil,
  false, nil], [11, 1]}
{[nil, nil, false, nil, true, nil, true, nil, nil, nil, true, nil, nil, true,
  nil], [2, 10]}
{[nil, true, nil, nil, true, nil, nil, true, nil, nil, true, nil, nil, true,
  nil, nil, true, nil], [8, 1, 5]}
{[nil, true, nil, true, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  true, false, nil, nil, true], [1, 7, 1, 1, 2]}
{[false, nil, nil, false, nil, nil, nil, true, nil, false], [2, 1, 1]}
{[nil, nil, false, false, false, nil, nil, true, nil, true, false], [1, 4]}
{[false, nil, nil, false, true, nil, nil, nil, nil, false, nil, false, nil],
 [1, 2, 1, 1]}
{[nil, nil, true, nil, true, false, nil, true, nil, nil, nil, true, true, true,
  nil, true, nil], [3, 7, 1]}
{[nil, nil, nil, nil, nil, true, nil, nil, nil, true, true, true, nil, false,
  nil, nil, nil], [2, 1, 6, 2]}
{[nil, true, nil, true, nil, nil, nil, true, false, nil, nil, nil, true, nil,
  false, nil, false, true], [8, 1, 1, 1]}
{[nil, false, nil, nil, true, nil, true, nil, true, nil, nil, true, true, true,
  nil, nil, true], [1, 14]}
{[true, false, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, false,
  false], [1, 5, 1]}
{[true, true, nil, true, nil, nil, nil, nil, nil, nil, nil, true, nil, nil, nil,
  true, true, nil, nil, nil], [9, 4, 2]}
{[false, nil, nil, false, false, nil, nil, nil, true, nil, nil], [1, 3]}
{[true, true, nil, nil, nil, nil, false, nil, nil, nil, nil, nil, false],
 [2, 1, 3]}
{[false, nil, nil, nil, false, nil, nil, nil, nil, nil, nil, false, true, nil,
  nil, nil, true, true], [1, 3, 1, 1, 4]}
{[true, false, nil, true, true, nil, nil, true, nil, nil, true, true, nil],
 [1, 7, 2]}
{[nil, true, nil, nil, true, nil, nil, nil, nil, nil], [2, 4]}
{[false, nil, true, nil, nil, nil, true, nil, nil, true, nil, nil, true, nil,
  true, false], [7, 4, 1]}
{[nil, nil, nil, nil, true, nil, false, true, nil, nil, true, false, false],
 [1, 2, 1, 1]}
{[nil, nil, false, nil, true, true, false, nil, true, nil, nil, true, nil, nil],
 [3, 1, 3]}
{[nil, false, nil, nil, nil, nil, false, nil, nil, true, nil, true, nil, nil,
  nil, nil, false, nil, nil, nil], [3, 5, 1, 3]}
{[nil, nil, nil, nil, nil, true, false, false, nil, true, true, true, nil,
  false, nil, nil, nil, false, nil, true], [2, 3, 5, 1, 1, 2]}
{[true, nil, false, nil, false, true, nil, false, nil, true, nil, nil],
 [1, 1, 1, 1]}
{[nil, true, nil, false, nil, nil, nil, false, true, true, false, nil, false,
  nil, false, nil], [2, 2, 1, 1]}
{[true, nil, true, nil, nil, nil, false, nil, true, false, nil, nil, nil, nil,
  nil, nil], [4, 1, 2]}
{[nil, false, nil, nil, nil, nil, nil, nil, false, nil, nil, nil], [1, 2]}
{[false, true, nil, nil, nil, nil, true, nil, nil, true, nil, true, true, nil,
  false, nil], [2, 1, 5, 1]}
{[nil, nil, nil, true, nil, true, nil, nil, nil, false, true, false],
 [1, 1, 1, 1]}
{[nil, true, true, nil, nil, true, true, nil, nil, nil, nil, nil, nil, false,
  nil, nil, nil, nil], [7, 1, 2, 1, 2]}
{[true, nil, nil, nil, nil, true, true, nil, true, nil, false, false, true, nil,
  true, nil, nil, false], [9, 1, 1]}
{[nil, nil, true, nil, nil, false, nil, nil, true, nil, nil, true, nil, nil,
  nil, nil, true], [1, 2, 1, 1, 4]}
{[false, nil, nil, nil, nil, true, nil, nil, nil, true, nil, nil, nil, nil],
 [5, 1, 1]}
{[nil, nil, nil, true, nil, false, nil, false, false, nil, nil, nil, nil, nil,
  nil, nil, true], [3, 4, 2]}
{[nil, nil, nil, nil, true, nil, true, nil, nil, true, nil, nil, false, nil,
  nil, nil, nil, false, false], [7, 2]}
{[true, nil, true, nil, nil, nil, nil, true, false, nil, nil, nil, false, false,
  true, nil], [5, 1, 2, 2]}
{[nil, true, nil, true, nil, true, nil, nil, false, nil, nil, nil, nil, nil,
  nil, false, false], [5, 1, 2]}
{[nil, nil, true, nil, nil, nil, nil, nil, nil, nil], [1, 5]}
{[false, false, nil, nil, true, true, nil, nil, false, nil, true, nil, nil,
  false, false, nil, nil, nil], [3, 2, 1]}
{[true, nil, nil, nil, nil, false, nil, nil, nil, nil, nil, nil, true, nil],
 [1, 1, 4, 1]}
{[nil, true, false, true, nil, nil, nil, nil, nil, nil, true, nil],
 [1, 1, 1, 3]}
{[nil, nil, false, nil, nil, false, nil, nil, nil, true, nil, nil, nil, false],
 [1, 2, 1, 4]}
{[nil, nil, true, nil, true, nil, nil, nil, nil, nil, nil], [4, 3]}
{[nil, nil, nil, nil, nil, false, nil, false, nil, nil, true, nil],
 [1, 1, 1, 1]}
{[nil, nil, true, true, nil, nil, true, nil, nil, nil, true, nil, nil], [6, 1]}
{[nil, false, nil, nil, nil, nil, true, true, true, nil, nil, true, nil, nil,
  nil], [3, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, nil, false, true,
  nil], [3, 1, 1, 2, 1]}
{[nil, nil, nil, nil, true, nil, false, nil, nil, nil, true, true, nil, nil],
 [1, 1, 6]}
{[nil, false, nil, true, nil, false, nil, nil, true, nil, nil, nil, nil, nil,
  nil], [2, 2, 2]}
{[true, false, nil, nil, true, true, nil, true, nil, nil, nil, nil, nil, true,
  nil, nil, nil, nil, nil, nil], [1, 10, 2, 1, 1]}
{[nil, false, nil, nil, true, nil, nil, nil, false, false, nil, nil, nil, nil],
 [1, 1, 2]}
{[false, true, true, nil, nil, nil, nil, false, nil, nil, nil], [4, 1]}
{[true, nil, nil, nil, false, false, nil, nil, nil, true, nil, nil, true, nil,
  nil, nil, true, nil, nil, nil], [1, 1, 1, 1, 9]}
{[true, false, true, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, true,
  false, true, nil, true, nil, false], [1, 7, 2, 1, 2]}
{[nil, nil, true, nil, nil, true, nil, nil, nil, nil, nil, true, nil, true,
  true, true, nil, nil, nil], [5, 3, 7]}
{[nil, true, nil, true, nil, false, nil, nil, false, nil, nil, nil],
 [1, 1, 1, 1]}
{[false, false, true, nil, nil, nil, nil, nil, nil, nil, nil, true],
 [1, 2, 3, 1]}
{[nil, false, nil, nil, true, false, nil, true, nil, nil, nil], [2, 2]}
{[false, true, nil, nil, nil, nil, nil, false, nil, true, true, nil, nil, nil,
  true, nil, nil], [6, 8]}
{[nil, false, nil, nil, nil, true, nil, nil, nil, nil, false, false, nil, nil,
  nil, nil, nil, nil, nil], [4, 1, 3, 2]}
{[nil, nil, nil, nil, false, nil, nil, nil, true, nil, nil, nil, false, false,
  nil], [1, 1, 2, 1, 1]}
{[true, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  nil], [1, 2, 1, 6]}
{[nil, false, nil, nil, false, nil, nil, nil, true, nil], [1, 4]}
{[nil, nil, true, nil, nil, nil, nil, true, false, nil, nil, nil], [4, 1, 1]}
{[nil, nil, nil, nil, false, nil, nil, false, nil, true, nil, nil, false, nil,
  nil, nil], [1, 1]}
{[true, false, nil, false, nil, true, nil, nil, nil, nil, nil, nil, false, nil,
  true, nil, false, nil], [1, 2, 3, 3]}
{[nil, true, true, nil, nil, true, true, nil, nil, false, nil, false, false,
  nil], [2, 4, 1]}
{[nil, nil, nil, false, nil, nil, true, nil, nil, nil, nil, nil, true, true,
  true, nil, true, nil, true], [1, 13, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, false, nil, nil, nil, nil, nil, nil,
  nil, nil, nil, true, nil], [2, 1, 1, 9]}
{[nil, true, nil, true, nil, nil, true, nil, nil, nil, nil, nil, true, nil, nil,
  nil, nil, nil], [2, 2, 1, 1, 3, 3]}
{[nil, nil, false, false, true, nil, nil, false, nil, nil, nil, false, nil, nil,
  nil, true, true], [3, 2, 3]}
{[nil, false, nil, true, nil, true, nil, nil, nil, true, nil], [4, 1]}
{[false, nil, true, nil, nil, true, nil, nil, nil, true, nil, nil, nil, nil,
  nil, nil, true, false, nil], [10, 4]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, true, nil, nil,
  nil, false, nil], [1, 1, 1, 1, 3, 1]}
{[false, false, nil, true, nil, nil, false, true, nil, nil, nil, nil, nil, nil,
  nil, true, nil, nil], [1, 1, 7, 1]}
{[nil, nil, nil, nil, nil, true, nil, true, nil, nil, nil, nil, nil, nil],
 [1, 3, 2]}
{[false, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, false, true, nil,
  nil, nil, nil, nil, nil], [2, 4]}
{[nil, nil, false, true, nil, true, nil, false, nil, false, nil, nil, nil, nil],
 [4, 2]}
{[nil, nil, nil, true, nil, nil, nil, nil, false, nil, true, nil, nil, nil,
  true], [1, 1, 3, 3, 1]}
{[nil, nil, false, nil, nil, nil, nil, nil, nil, false, nil, nil, nil, false,
  nil, nil], [1, 3, 2]}
{[nil, true, false, true, nil, nil, nil, nil, nil, true, nil, nil, nil, true,
  true, true, nil], [2, 1, 11]}
{[nil, nil, nil, nil, false, true, nil, false, true, nil, nil, nil, nil, true,
  true, nil, nil, nil, false, true], [2, 1, 2, 5, 1]}
{[nil, nil, false, true, true, nil, nil, nil, nil, true, true, nil, false,
  false, false], [3, 4]}
{[false, false, nil, true, nil, nil, false, nil, nil, false, nil, true, true,
  nil, nil, true, nil, nil, false, nil], [4, 6]}
{[nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, false],
 [6, 3, 2]}
{[nil, nil, false, true, true, nil, nil, nil, nil, nil, nil, nil, nil, true,
  true, true, true, nil, nil, true], [1, 15, 1]}
{[nil, nil, nil, false, nil, false, nil, nil, nil, nil, nil], [1, 3]}
{[nil, nil, nil, true, nil, true, false, nil, true, true, nil, nil], [5, 3]}
{[false, nil, nil, true, nil, false, false, true, true, nil], [4, 3]}
{[nil, nil, nil, nil, nil, true, nil, nil, true, nil, nil, nil, nil, false,
  true, true, nil], [6, 2, 2, 2]}
{[nil, nil, false, true, nil, nil, true, nil, nil, nil, true, true, false, true,
  false], [1, 3, 2, 1]}
{[nil, true, false, nil, false, nil, nil, nil, nil, false, nil, false],
 [1, 2, 1]}
{[nil, nil, false, nil, nil, nil, nil, nil, nil, nil, nil, nil, false],
 [2, 3, 2, 1]}
{[nil, nil, nil, nil, true, nil, nil, nil, false, nil], [1, 2, 1]}
{[nil, nil, nil, nil, nil, nil, false, true, nil, nil, nil, false], [1, 1, 3]}
{[true, false, false, nil, false, nil, nil, true, nil, nil], [1, 3]}
{[false, false, true, false, nil, nil, nil, nil, nil, nil, nil, nil, nil, false],
 [1, 4, 2]}
{[nil, false, nil, nil, nil, nil, nil, nil, true, nil, nil, nil, nil, nil,
  false, nil], [7, 2, 1]}
{[nil, true, nil, nil, false, nil, false, true, nil, true, true, true, nil, nil,
  nil], [1, 1, 1, 5]}
{[false, nil, nil, false, nil, true, false, nil, nil, false, nil, false, nil,
  nil, nil, false, false, false, nil, false], [2, 1]}
{[nil, nil, nil, true, nil, false, true, nil, true, nil, false, nil, nil, false,
  false, nil, true, false, nil], [1, 3, 4, 2, 2, 1]}
{[false, false, nil, nil, false, false, nil, true, nil, nil, false], [1, 4]}
{[false, nil, nil, true, nil, nil, nil, nil, nil, false, nil, nil, nil, nil,
  nil, nil, nil], [6, 3]}
{[nil, false, false, nil, nil, nil, nil, nil, nil, false, false, nil, nil, nil,
  false, nil], [1, 2, 3]}
{[true, nil, nil, nil, nil, nil, false, nil, true, nil, nil, nil, nil, nil,
  true, nil, nil, nil, nil, false], [1, 1, 1, 12]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, false, nil, true, nil, nil, nil,
  nil, nil, nil, nil], [1, 5, 7]}
{[nil, nil, nil, false, nil, true, false, nil, nil, nil, false, nil, nil, nil],
 [2, 2, 2, 3]}
{[nil, nil, false, nil, false, nil, false, nil, nil, true, false, nil, nil, nil,
  nil], [1, 3, 2]}
{[nil, nil, false, nil, nil, nil, nil, true, true, nil, nil, nil, nil, true],
 [1, 6, 1]}
{[nil, false, nil, nil, nil, nil, nil, nil, nil, false, nil, true, false],
 [1, 2, 1, 1]}
{[false, false, nil, nil, true, false, nil, nil, nil, nil, false, nil, nil, nil,
  nil, nil, nil], [3, 1]}
{[nil, nil, true, nil, true, nil, false, true, true, true, nil, true, nil, nil,
  true, nil, true, false, nil, nil], [4, 5, 2, 1, 1]}
{[nil, nil, true, nil, false, false, nil, nil, nil, nil], [3, 2]}
{[nil, true, nil, true, true, false, nil, nil, nil, false, true, false, nil,
  nil, true, true, nil, nil, nil, true], [5, 1, 1, 1, 4, 2]}
{[false, true, false, nil, true, nil, false, nil, nil, true], [1, 2, 3]}
{[true, nil, false, true, true, nil, nil, false, false, true, nil, nil, nil,
  false, nil, nil, nil, true, nil, nil], [1, 2, 1, 4, 3]}
{[nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  nil, nil, nil], [3, 1, 1, 2, 1, 1]}
{[false, nil, nil, false, true, nil, false, nil, true, nil, nil, true],
 [1, 1, 3, 1]}
{[nil, false, nil, true, nil, nil, true, nil, nil, nil, nil, nil, nil, nil,
  true, nil, nil, nil, nil, nil], [1, 5, 3, 4, 1]}
{[nil, nil, nil, true, nil, nil, nil, nil, true, nil, nil, nil], [4, 3, 1]}
{[false, nil, nil, true, nil, nil, nil, false, nil, nil, true, nil], [2, 4]}
{[true, true, nil, false, nil, nil, false, true, nil, nil, true, nil, nil, nil],
 [2, 1, 6]}
{[true, nil, nil, true, false, false, true, true, false, false, nil, true,
  false], [1, 1, 2, 1]}
{[nil, true, nil, false, true, nil, true, nil, nil, true, nil, nil, true, true,
  false, nil, nil, nil, true, nil], [2, 3, 2, 2, 4]}
{[false, false, nil, nil, nil, nil, nil, nil, nil, nil, false, nil, false, nil,
  nil, false, nil, true, nil], [1, 1, 3, 1, 1, 3]}
{[true, nil, nil, false, nil, nil, nil, nil, nil, nil, true], [2, 5]}
{[nil, false, true, true, true, nil, nil, nil, nil, nil, nil, nil, nil],
 [3, 1, 2]}
{[false, nil, true, nil, nil, true, nil, true, nil, nil, nil, false, false, nil,
  nil, nil, nil, nil], [2, 7, 3]}
{[nil, true, nil, true, true, nil, true, nil, nil, false, true, true, nil,
  false, false, nil, true, nil, nil], [7, 2, 3]}
{[nil, nil, true, nil, false, nil, nil, false, false, nil, true, nil, true,
  false, true], [1, 1, 4, 1]}
{[nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, true, false, nil],
 [9, 1]}
{[true, true, nil, true, nil, true, true, nil, nil, nil, nil, nil, nil, nil,
  nil, nil, nil, nil, nil, nil], [8, 1, 1, 2, 3]}
{[true, nil, nil, nil, nil, true, nil, nil, nil, nil, nil, true, nil, nil, nil,
  nil], [9, 1, 1]}
{[nil, true, false, false, nil, nil, nil, true, nil, false, true, nil, nil, nil,
  true, nil, true, true, nil, true], [1, 1, 1, 10]}
{[nil, false, nil, nil, nil, nil, nil, true, true, false, nil, true, nil, nil],
 [1, 4, 2]}
{[nil, false, nil, nil, nil, nil, nil, nil, nil, nil, nil], [5, 2]}
{[nil, true, nil, true, nil, nil, nil, nil, nil, false, nil, nil, true, nil,
  true, true, nil, nil], [4, 2, 8]}
{[nil, nil, nil, false, true, nil, nil, true, false, nil, true, nil, nil, true,
  nil, false, nil, nil, nil], [2, 1, 1, 5, 2]}
{[nil, true, nil, nil, false, nil, nil, nil, nil, nil, nil, nil, nil, nil, true,
  false], [4, 2, 4]}
{[false, true, true, nil, nil, nil, nil, nil, false, true, false, nil, false],
 [2, 3, 1]}
{[false, true, true, false, false, nil, nil, nil, nil, false, nil], [2, 3]}
{[nil, true, nil, true, nil, nil, nil, false, nil, nil, nil, nil, false, nil,
  nil, nil, nil], [4, 2]}
{[true, true, nil, false, nil, nil, nil, false, nil, nil, nil, nil, nil],
 [2, 1, 5]}
{[nil, true, nil, nil, false, nil, true, nil, nil, nil], [1, 1, 5]}
{[nil, false, nil, nil, nil, nil, true, nil, nil, false, false, true, nil,
  false, false, nil], [2, 1, 2]}
{[true, nil, nil, nil, nil, nil, nil, true, false, false], [1, 2, 1]}
{[nil, nil, nil, true, nil, nil, false, false, nil, true, nil, nil, nil],
 [1, 1, 3, 1]}
{[nil, nil, true, nil, nil, nil, false, true, nil, nil, nil], [6, 1, 1]}
{[nil, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  nil, nil, nil], [3, 2, 6, 2]}
{[true, nil, nil, nil, nil, nil, nil, false, nil, nil, nil, nil, nil, nil],
 [4, 1, 1, 1]}
{[nil, nil, nil, nil, nil, true, nil, true, nil, nil], [2, 6]}
{[nil, true, true, nil, true, nil, nil, nil, nil, nil, nil, nil, false, nil,
  nil, nil, nil], [2, 2, 1, 1, 4]}
{[nil, false, false, nil, nil, nil, nil, nil, true, nil, false, nil], [1, 3]}
{[true, true, false, false, true, nil, false, nil, nil, false], [2, 2, 2]}
{[false, false, true, nil, nil, nil, nil, nil, nil, nil], [1, 2, 1]}
{[false, false, nil, nil, nil, nil, nil, true, true, false, false], [2, 3]}
{[nil, nil, true, nil, nil, nil, nil, nil, nil, nil, true, nil], [1, 3, 2, 1]}
{[true, nil, nil, false, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  nil, nil], [3, 3, 1, 4]}
{[true, nil, nil, false, nil, nil, true, false, nil, nil, nil, nil], [2, 1, 2]}
{[nil, nil, nil, nil, nil, true, nil, false, nil, nil, nil, nil, nil],
 [1, 2, 1, 1]}
{[nil, nil, nil, nil, true, nil, true, true, nil, nil, nil, true, true, nil,
  nil, true, nil], [6, 8]}
{[nil, false, nil, nil, true, nil, false, nil, nil, nil, nil, nil, false, false],
 [2, 4]}
{[nil, nil, false, nil, nil, nil, nil, nil, true, nil, nil, true, nil],
 [1, 1, 5]}
{[nil, nil, nil, nil, nil, nil, true, false, true, nil, nil, nil, false, nil,
  true, nil, nil, nil], [2, 1, 1, 4, 1, 1]}
{[nil, true, nil, nil, false, nil, nil, nil, true, nil, nil, nil, false, false,
  nil, true], [1, 1, 2, 1, 2]}
{[true, true, nil, nil, nil, false, nil, nil, nil, true, true, true, nil],
 [2, 1, 1, 4]}
{[true, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  true, true, nil, true, false], [5, 1, 1, 7]}
{[nil, nil, false, false, nil, nil, nil, true, nil, nil, nil, nil, nil, nil,
  nil, nil, nil, nil, nil, nil], [1, 4, 1, 1, 3, 1]}
{[nil, false, false, nil, nil, true, nil, nil, false, nil, true, true, nil, nil],
 [1, 1, 1, 3]}
{[false, nil, false, nil, nil, false, nil, nil, nil, true, false, nil, false,
  nil, nil], [2, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [1, 4]}
{[nil, nil, nil, nil, true, false, nil, nil, nil, nil], [3, 1]}
{[nil, nil, true, nil, nil, nil, nil, nil, nil, true, nil, nil, false, nil],
 [2, 8, 1]}
{[false, nil, nil, nil, nil, true, nil, true, nil, nil, nil, nil, nil, nil,
  false], [6, 3]}
{[nil, nil, true, nil, true, true, true, nil, false, nil, false, nil, nil, nil,
  true, nil, nil, nil, nil, nil], [8, 1, 1, 4, 1]}
{[nil, nil, nil, nil, false, nil, true, nil, nil, nil, false], [1, 5]}
{[nil, false, nil, nil, nil, nil, true, nil, nil, nil, nil, false], [1, 7]}
{[nil, nil, nil, nil, false, nil, nil, nil, nil, nil], [3, 1]}
{[nil, false, true, false, false, true, true, nil, nil, true, nil, nil, nil,
  nil, nil], [1, 1, 9]}
{[true, nil, true, nil, true, nil, nil, nil, nil, nil, nil, true, true, nil,
  nil, nil, nil, nil, nil], [1, 1, 10, 1, 1]}
{[nil, nil, false, nil, nil, nil, false, true, nil, nil], [2, 1]}
{[false, nil, true, nil, nil, nil, nil, true, false, nil, nil, nil, false, nil,
  false, true], [4, 2, 2, 1, 1]}
{[false, nil, nil, nil, nil, true, false, nil, nil, nil], [1, 3, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, nil, nil,
  nil], [1, 6, 3, 1]}
{[nil, nil, nil, false, true, nil, false, nil, nil, nil, nil, false], [2, 2]}
{[nil, nil, true, nil, nil, nil, nil, nil, true, nil, nil, nil], [8, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, false], [1, 1, 2, 3]}
{[nil, nil, nil, true, false, nil, nil, nil, nil, false, true, nil, false, nil,
  nil, true], [3, 3, 1, 1, 1]}
{[nil, nil, nil, nil, true, nil, nil, false, false, nil, false, true, nil,
  false], [3, 1]}
{[false, true, true, nil, nil, nil, nil, nil, true, nil, nil, nil, nil, nil,
  false, nil, false, nil, true, nil], [9, 2, 1, 1]}
{[nil, nil, nil, nil, false, nil, nil, nil, nil, nil, nil, nil, true, nil, nil],
 [2, 1, 6]}
{[false, false, nil, nil, false, nil, true, nil, nil, nil], [1, 2, 1]}
{[true, nil, false, nil, nil, nil, true, false, nil, nil, nil, nil, true, true,
  false], [1, 1, 1, 1, 2]}
{[nil, false, nil, nil, nil, true, nil, nil, nil, nil, true], [1, 1, 6]}
{[nil, false, nil, nil, nil, nil, nil, nil, nil, nil, nil], [1, 6]}
{[nil, nil, nil, true, nil, true, true, nil, nil, nil, true, nil, nil, nil, nil,
  false, nil, false, nil], [9, 2, 1]}
{[nil, false, true, nil, true, false, nil, nil, nil, nil, nil, true, nil, nil,
  nil, true, true, true, nil], [1, 1, 1, 1, 1, 8]}
{[nil, nil, nil, true, false, nil, false, nil, nil, false, true, nil],
 [4, 1, 2, 1]}
{[nil, nil, nil, false, false, nil, false, false, nil, true], [2, 2]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], [1, 2, 1]}
{[false, false, nil, nil, nil, true, nil, nil, nil, nil, nil, true, false,
  false, false], [1, 7]}
{[nil, nil, false, nil, nil, nil, nil, false, true, nil, nil, nil, nil, nil],
 [1, 3, 1, 3]}
{[false, nil, true, nil, nil, nil, true, nil, nil, nil], [2, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, false, nil, nil, nil, nil, nil,
  nil, nil], [2, 1, 3, 1, 5]}
{[nil, nil, nil, false, nil, nil, nil, nil, nil, nil, true, nil, nil, nil, nil],
 [2, 6]}
{[nil, nil, true, true, nil, nil, nil, true, nil, true, nil], [3, 1, 2]}
{[nil, false, false, false, nil, true, nil, false, nil, nil, nil, false, false,
  false], [3, 2]}
{[nil, nil, nil, true, nil, false, false, nil, true, true, nil, nil], [2, 3]}
{[true, nil, true, nil, nil, nil, nil, nil, nil, true, nil, nil, nil, true, nil,
  nil, true, nil, nil], [4, 13]}
{[nil, nil, nil, nil, nil, true, nil, nil, nil, nil, false], [1, 1, 1]}
{[false, nil, false, true, nil, true, nil, nil, nil, nil, true, nil, nil, nil,
  nil, nil, false, nil, nil, nil], [1, 6, 1, 2]}
{[nil, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, false, nil, nil],
 [8, 1]}
{[false, nil, true, nil, nil, nil, true, nil, nil, nil, false, true, nil, true],
 [2, 1, 1, 3]}
{[nil, nil, nil, nil, true, false, nil, nil, nil, nil, nil], [5, 1, 1]}
{[false, nil, true, nil, nil, nil, false, nil, true, true, true, nil, false,
  nil, nil, true], [3, 5, 1]}
{[nil, true, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, true, nil, nil,
  false, true, false], [8, 4, 1]}
{[nil, nil, nil, nil, nil, nil, true, false, true, nil, nil, nil, false, nil,
  nil], [1, 5, 2, 1, 1]}
{[true, nil, nil, nil, true, true, false, nil, true, true, nil, nil], [1, 3, 4]}
{[true, false, nil, false, nil, false, nil, nil, nil, nil, nil, nil, nil, nil],
 [1, 1, 4, 1]}
{[nil, true, nil, nil, nil, nil, true, nil, nil, true, nil, nil], [2, 3, 3]}
{[true, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, false, true, nil,
  nil], [1, 1, 1, 2, 1]}
{[false, nil, nil, nil, nil, nil, nil, nil, nil, nil], [1, 1, 1]}
{[nil, nil, nil, true, nil, nil, nil, nil, nil, false, false, nil, nil, false],
 [9, 1]}
{[false, false, nil, true, nil, nil, true, nil, false, nil, nil, false, false,
  nil, nil, nil, false], [6, 2]}
{[nil, false, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, false, nil,
  false, false, false, nil, nil], [4, 4, 1, 2]}
{[true, nil, false, nil, nil, nil, nil, false, nil, nil, true], [1, 4, 2]}
{[false, nil, true, nil, false, nil, nil, false, true, nil, nil, nil, nil, nil,
  nil], [1, 1, 1, 4]}
{[false, false, true, nil, nil, nil, nil, nil, false, nil, nil, true, nil, nil,
  nil, false, true, true], [2, 1, 1, 1, 1, 2]}
{[false, true, nil, nil, nil, nil, nil, nil, nil, false, nil, true, nil, nil,
  false], [6, 1, 3]}
{[false, true, nil, nil, true, nil, false, true, nil, nil, nil, nil, nil, true,
  nil, nil, false, nil, nil, nil], [1, 1, 1, 7, 1]}
{[nil, true, nil, nil, nil, false, nil, false, nil, true, nil, nil, nil],
 [1, 2, 1, 4]}
{[true, nil, false, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  nil, nil, nil, nil], [1, 2, 6, 1]}
{[nil, nil, nil, true, false, nil, nil, false, false, nil, nil], [4, 1]}
{[true, nil, nil, nil, false, true, nil, nil, nil, nil, false, nil],
 [2, 1, 2, 1]}
{[false, true, nil, nil, nil, nil, nil, nil, false, true, nil, nil, false, nil],
 [2, 2, 2]}
{[nil, false, nil, nil, nil, nil, nil, true, nil, nil, true, false, nil, nil,
  true, nil, false, nil], [2, 4, 4]}
{[false, true, nil, nil, nil, nil, nil, nil, nil, true, true, false], [1, 1, 2]}
{[nil, true, nil, nil, nil, nil, nil, nil, false, true, false, true, true, nil],
 [2, 4, 1, 3]}
{[nil, true, nil, nil, nil, nil, false, nil, nil, nil, true, nil], [5, 3]}
{[nil, false, nil, nil, true, nil, true, nil, nil, true, true, false, true, nil],
 [1, 4, 2, 1]}
{[nil, nil, nil, true, nil, true, nil, true, true, nil, nil, nil, nil, nil, nil,
  nil], [1, 6, 1, 1, 1]}
{[nil, false, false, true, nil, false, true, nil, true, nil], [1, 1, 2]}
{[nil, nil, nil, nil, false, nil, nil, false, true, nil, nil], [1, 2, 1]}
{[nil, true, nil, false, nil, false, true, nil, false, false, false, nil, nil],
 [2, 1, 2, 2]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, nil, nil, false],
 [1, 1, 1, 5]}
{[false, nil, true, nil, nil, nil, nil, false, nil, nil, nil, true, nil, nil],
 [6, 1, 2]}
{[nil, nil, false, nil, true, nil, nil, nil, nil, false, nil, nil, nil, true,
  false], [1, 4, 1, 1]}
{[false, nil, nil, nil, true, nil, nil, false, nil, nil, nil, nil, nil, true,
  true, true], [4, 8]}
{[nil, nil, true, true, nil, nil, nil, nil, nil, true, nil, nil, nil], [8, 3]}
{[nil, true, nil, nil, nil, nil, nil, nil, nil, true, true, false, nil], [3, 4]}
{[nil, nil, false, true, nil, nil, nil, true, nil, nil, true, nil, false],
 [5, 1]}
{[nil, true, false, nil, nil, nil, nil, true, nil, nil, nil, nil, true, false,
  nil, nil, nil, false], [1, 1, 6, 2]}
{[nil, nil, nil, nil, nil, nil, nil, true, nil, nil, nil, true, nil, nil],
 [3, 6]}
{[nil, nil, true, false, nil, true, false, nil, nil, nil, nil], [2, 1, 2]}
{[nil, nil, nil, nil, nil, nil, nil, nil, false, nil, true, nil, nil, nil, nil,
  nil, nil, false, nil, nil], [1, 1, 1, 1, 6, 1]}
{[false, nil, false, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true,
  nil, nil], [5, 4]}
{[nil, true, nil, false, false, nil, nil, nil, true, nil, nil, true, nil, nil,
  true, nil, nil, nil], [2, 11]}
{[nil, nil, true, nil, nil, nil, false, nil, nil, nil, true, nil, nil, true,
  nil, nil, nil], [2, 2, 6]}
{[true, true, nil, true, nil, nil, true, true, nil, nil, true, nil, nil, nil,
  nil, nil, false, false, nil, false], [9, 2, 1, 1, 1]}
{[true, nil, nil, nil, nil, nil, nil, false, nil, false, true, nil, nil, true,
  nil], [1, 2, 1, 1, 1]}
{[false, nil, nil, nil, false, nil, nil, true, nil, false, true, nil, nil],
 [1, 1, 2, 1]}
{[false, nil, nil, nil, true, false, nil, true, nil, nil, true, nil, true, nil,
  nil, true], [4, 1, 4, 2]}
{[nil, false, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  false, nil], [2, 2]}
{[nil, false, nil, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, false,
  nil, nil], [4, 1]}
{[nil, true, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, false, nil,
  false, true], [6, 2, 1, 1, 1]}
{[false, false, nil, nil, nil, nil, true, nil, nil, nil, nil, nil, true, false],
 [5, 1, 1]}
{[nil, nil, nil, nil, true, false, true, nil, nil, nil, nil, nil, nil, nil, nil,
  nil, nil, nil, nil], [1, 1, 1, 1, 8, 1]}
{[nil, false, false, false, nil, true, nil, true, nil, nil, nil], [1, 3]}
{[nil, true, nil, nil, nil, nil, nil, true, false, false, nil, false, nil, nil],
 [7, 1]}
{[nil, nil, true, nil, nil, nil, nil, nil, nil, false, true, nil, true, nil,
  true, nil, false, nil, nil], [4, 2, 6, 1]}
{[nil, nil, nil, true, nil, nil, nil, false, nil, nil, false], [4, 1, 1]}
{[nil, nil, nil, true, nil, nil, nil, true, nil, true, nil, true, nil, true,
  nil, nil, true, nil, nil, nil], [2, 1, 3, 9]}
{[nil, nil, false, nil, nil, nil, nil, false, nil, nil, nil, true, true, nil,
  true], [2, 6]}
{[nil, nil, nil, false, true, nil, nil, nil, nil, true, nil, true, nil, nil,
  true, nil, nil, false, true], [1, 1, 1, 10, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, false, nil, nil, true, nil,
  true, nil, nil], [2, 5, 4]}
{[nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, true],
 [1, 5, 3]}
{[nil, nil, nil, nil, false, nil, false, false, true, nil, nil, nil], [2, 3]}
{[false, nil, true, nil, nil, true, nil, nil, false, nil, nil, nil, false,
  false, nil, true], [1, 2, 1, 2, 1]}
{[true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, true,
  true, nil, true, nil, nil], [3, 14]}
{[nil, nil, nil, nil, nil, nil, nil, false, false, nil, nil, nil, nil, nil,
  true, true, nil, nil], [2, 2, 9]}
{[nil, true, true, nil, true, nil, false, nil, nil, nil, false, nil, nil, nil,
  nil, false, nil, nil, true], [5, 1, 1, 2, 1]}
{[nil, nil, nil, true, false, nil, nil, nil, nil, true, true, true, nil, true,
  true, true, false, nil, nil, false], [1, 1, 1, 8, 1]}
{[nil, true, nil, nil, nil, nil, nil, nil, true, nil, nil, true, nil],
 [2, 1, 6]}
{[nil, false, false, nil, false, false, nil, nil, true, false], [1, 1, 1]}
{[true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, false, nil, nil],
 [1, 6, 1]}
{[false, nil, nil, nil, false, nil, nil, nil, nil, nil, nil], [1, 3, 1]}
{[nil, false, nil, nil, nil, nil, true, nil, nil, nil, nil, true, true, nil,
  nil, false, nil], [1, 8, 1]}
{[nil, nil, true, nil, false, nil, false, nil, nil, nil, false, nil, false,
  false, nil], [2, 1]}
{[nil, nil, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil],
 [1, 1, 1, 2, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, false, nil, false, nil,
  true], [1, 5, 1, 1, 1]}
{[nil, nil, true, nil, nil, false, nil, nil, true, nil, nil, true, nil, nil,
  nil, nil, nil, nil], [3, 1, 4, 2]}
{[false, nil, nil, nil, nil, true, true, nil, nil, nil, true], [4, 1]}
{[nil, nil, nil, true, false, nil, true, nil, nil, false, nil, nil, nil, nil,
  nil, nil, nil, true], [2, 3, 5, 1]}
{[nil, nil, nil, nil, nil, true, false, true, nil, false, nil, false, true, nil,
  nil, nil, false], [6, 2, 4]}
{[nil, false, nil, nil, true, nil, nil, nil, nil, false, true, nil, nil, true,
  nil, nil, nil, true], [4, 8]}
{[true, nil, nil, nil, false, nil, true, false, true, nil, nil, true, false,
  nil, nil, true, true, nil, nil], [1, 1, 1, 4, 2, 1]}
{[nil, true, nil, false, true, true, false, false, true, nil, true, true, false,
  nil, true], [2, 2, 4, 2]}
{[nil, nil, nil, false, nil, nil, nil, nil, nil, nil, false, nil, nil, nil, nil,
  nil, nil, true, nil, true], [1, 1, 1, 1, 1, 9]}
{[nil, false, nil, true, nil, nil, true, nil, true, false, true, nil],
 [1, 1, 3, 2]}
{[nil, true, nil, nil, nil, nil, false, nil, true, nil, nil, nil, nil], [4, 3]}
{[nil, nil, true, nil, true, nil, true, nil, false, nil, nil, nil, nil, nil],
 [7, 1, 1]}
{[true, true, nil, true, nil, nil, true, nil, nil, false, nil], [8, 1]}
{[nil, nil, true, false, nil, true, true, true, nil, true, nil, false, nil],
 [2, 6]}
{[true, nil, true, true, nil, nil, nil, nil, nil, nil, nil, nil, true, false],
 [7, 1, 1, 1]}
{[nil, nil, false, false, true, nil, nil, nil, true, true, nil, nil, nil, false,
  nil, true, nil, nil, nil, nil], [1, 3, 2, 2, 5]}
{[nil, nil, true, nil, true, nil, false, nil, nil, nil, nil, true, nil, true],
 [3, 1, 2, 4]}
{[nil, nil, nil, nil, nil, nil, true, true, nil, nil, false, true, nil, nil,
  nil, nil], [3, 3, 3]}
{[nil, true, nil, nil, nil, true, false, nil, nil, nil, nil, nil, true, nil,
  nil], [4, 1, 5]}
{[nil, nil, false, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, false,
  nil, true, false], [1, 6, 1, 2]}
{[false, false, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil,
  true, true], [8, 1, 2]}
{[false, true, nil, nil, nil, false, true, true, nil, nil, false, nil, true,
  nil, nil, true, nil, nil], [3, 2, 1, 1, 2]}
{[nil, true, nil, nil, nil, true, true, nil, false, false], [1, 1, 2]}
{[false, nil, nil, nil, nil, true, nil, false, nil, true, true, nil, nil, true,
  false, false, nil, nil, nil], [6, 6, 1]}
{[nil, nil, true, nil, nil, nil, true, true, false, nil, false, true, true,
  true, nil, nil, true, nil], [7, 4, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, true, nil, nil, nil,
  nil], [9, 1]}
{[nil, true, nil, true, true, nil, true, nil, nil, nil, true, nil, false, false],
 [7, 2]}
{[false, true, nil, false, nil, false, nil, nil, nil, nil, nil], [1, 1, 2]}
{[nil, true, false, nil, true, nil, nil, nil, nil, true, false, nil, nil],
 [1, 3, 1, 2]}
{[false, nil, nil, nil, nil, true, nil, nil, false, nil, nil, true, false,
  false, nil, nil, nil], [4, 3, 2]}
{[nil, nil, nil, nil, nil, nil, nil, false, nil, true, nil, nil, true, true,
  true, nil, nil, false], [6, 7]}
{[false, nil, nil, nil, true, true, nil, nil, nil, true, nil, nil], [1, 4, 1]}
{[nil, nil, nil, nil, true, nil, true, true, true, nil, nil, nil, true, nil],
 [1, 1, 1, 7]}
{[true, nil, false, nil, false, nil, false, nil, true, nil], [1, 1, 1]}
{[nil, false, true, true, nil, true, nil, false, nil, true, nil, nil, false,
  true, false], [4, 2, 1]}
{[nil, nil, false, nil, nil, nil, false, nil, nil, true, nil, true, true, nil,
  false, nil, nil, nil, true], [2, 2, 6, 1, 1]}
{[false, nil, nil, nil, false, true, false, false, true, nil, nil, nil, false,
  nil, nil], [2, 1, 1, 1, 1]}
{[nil, true, nil, nil, nil, nil, false, nil, false, nil, true], [2, 1, 2]}
{[nil, nil, true, nil, nil, nil, nil, true, nil, true, nil, false, nil, nil,
  false], [3, 1, 1, 2, 2]}
{[nil, nil, nil, false, nil, nil, nil, nil, true, false, nil, nil, nil, nil,
  nil], [1, 4, 2]}
{[false, nil, nil, true, true, nil, nil, nil, nil, true, nil, false, nil, nil,
  nil, false], [5, 4, 1]}
{[nil, true, true, nil, nil, true, nil, nil, nil, nil, true, nil, nil, true],
 [2, 2, 1, 4]}
{[nil, true, nil, nil, nil, nil, false, true, nil, true, nil, nil, nil, true,
  nil, nil], [2, 2, 7, 1]}
{[nil, nil, nil, nil, true, false, false, nil, true, nil], [4, 3]}
{[true, false, nil, false, true, nil, nil, nil, nil, nil, true, nil],
 [1, 1, 2, 3]}
{[nil, nil, true, nil, nil, nil, nil, nil, nil, true, nil, false, nil, nil, nil],
 [5, 1, 1, 1, 1]}
{[nil, nil, nil, nil, nil, nil, true, false, true, nil], [1, 2, 2]}
{[nil, nil, true, false, nil, nil, nil, nil, nil, nil, true, nil], [3, 4, 2]}
{[true, nil, nil, nil, nil, nil, true, nil, nil, false, nil, false, true, true,
  nil, nil, nil, nil, nil], [1, 1, 4, 1, 5, 1]}
{[nil, nil, false, nil, nil, false, nil, nil, nil, true, nil, nil, nil, true,
  true, nil, nil, nil, nil, false], [1, 6, 4]}
{[false, nil, true, nil, false, nil, false, false, nil, true, nil], [2, 3]}
{[nil, true, nil, nil, nil, nil, nil, nil, false, nil, true, nil, false, true],
 [5, 1, 2, 1]}
{[nil, nil, true, nil, nil, nil, nil, true, nil, nil, false, true, nil, true,
  nil], [7, 3]}
{[nil, nil, true, nil, nil, true, nil, false, nil, nil, nil, nil, true, nil],
 [1, 2, 5]}
{[nil, nil, nil, false, nil, nil, nil, false, false, nil, nil, nil, nil, nil,
  nil, nil], [2, 3, 3]}
{[nil, nil, nil, true, nil, nil, nil, true, nil, nil, nil], [1, 7]}
{[true, nil, nil, nil, false, nil, nil, nil, true, nil, nil, nil], [1, 2, 1, 3]}
{[nil, nil, nil, nil, nil, false, nil, false, true, nil, nil, false, nil, nil,
  true], [2, 2, 1, 2, 2]}
{[nil, nil, false, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, true,
  nil, nil, true, true, nil], [1, 16]}
{[nil, nil, false, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil],
 [2, 6, 3]}
{[nil, nil, nil, nil, nil, true, nil, nil, nil, nil, nil, true, true, nil,
  false, false, nil, nil, true], [1, 1, 2, 7, 1, 1]}
{[false, true, nil, false, nil, nil, nil, nil, nil, nil, true, true, nil, nil,
  false, nil, false, nil, nil], [1, 2, 5, 1, 1, 1]}
{[nil, true, nil, nil, nil, false, nil, nil, nil, nil, false, nil],
 [1, 1, 4, 1]}
{[nil, nil, nil, nil, nil, nil, nil, nil, true, nil, true, nil, nil, nil, nil,
  nil], [1, 1, 11]}
{[nil, nil, nil, nil, true, true, true, false, nil, true, nil, nil, false, true,
  nil], [1, 3, 2, 1]}
{[true, nil, nil, false, nil, nil, nil, true, nil, nil, nil, nil, nil, nil, nil],
 [3, 4, 3]}
{[nil, true, nil, nil, nil, nil, nil, false, false, nil], [2, 1, 1]}
{[nil, nil, nil, nil, true, true, nil, nil, nil, nil, true, nil, nil, nil, nil,
  nil, nil, nil, true, true], [3, 3, 8, 2]}
{[nil, nil, nil, nil, nil, false, nil, nil, true, true, true, nil, nil, nil,
  nil, nil], [2, 4, 1]}
{[false, nil, true, nil, nil, true, nil, nil, nil, false, nil, nil],
 [2, 1, 1, 1]}
{[nil, nil, nil, nil, true, nil, nil, false, nil, nil, nil, nil, nil, false],
 [5, 1, 1]}
{[nil, true, nil, nil, nil, nil, nil, false, nil, nil, false, nil, nil, nil,
  nil, true], [5, 1, 1, 1, 3]}
{[nil, true, true, false, nil, nil, nil, nil, nil, nil, true], [3, 5]}
{[nil, nil, true, true, nil, nil, nil, true, nil, nil, nil, nil, false, nil,
  true, false, nil, nil], [7, 3, 1, 1]}
{[nil, false, false, true, false, nil, nil, true, true, nil, nil, nil, false,
  nil, nil], [1, 7, 1]}
{[nil, true, nil, true, true, nil, nil, nil, nil, nil, true, nil, nil, false,
  nil, true], [1, 10, 1]}
{[nil, nil, false, nil, true, nil, true, false, nil, nil, nil, nil, true, nil,
  nil, false], [4, 1]}
{[false, nil, nil, nil, nil, nil, true, nil, true, true, false, nil, nil, false],
 [1, 7]}
{[nil, nil, nil, true, false, nil, nil, nil, false, nil, true, nil, nil, nil,
  nil, nil], [1, 5]}
{[true, nil, false, nil, nil, nil, nil, nil, nil, nil, false, nil, nil, nil],
 [1, 1, 5, 1]}
{[nil, true, true, nil, nil, true, nil, nil, nil, true, true], [7, 2]}
{[true, nil, true, true, nil, nil, nil, nil, nil, nil, false, false], [7, 1]}
{[true, false, false, false, nil, nil, nil, nil, nil, nil, nil, nil, true, true,
  nil, true, true, nil, nil], [1, 3, 7]}
{[nil, nil, nil, true, nil, nil, nil, nil, nil, true, nil, nil, nil, nil, nil,
  true, nil], [3, 8]}
{[nil, true, nil, nil, nil, true, nil, nil, true, false, nil, nil, nil, nil,
  false, nil, nil, true], [1, 1, 4, 1, 1, 1]}
{[nil, nil, true, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil,
  nil], [4, 1, 1, 1]}
{[nil, false, nil, nil, nil, nil, nil, true, true, nil, nil, nil, nil, true,
  true, nil, nil, nil, nil, nil], [1, 1, 8, 2, 1, 1]}
{[nil, nil, nil, nil, nil, true, nil, nil, nil, nil], [5, 1]}
{[nil, false, nil, nil, false, true, true, true, nil, true, true, nil, nil,
  true, nil], [1, 1, 3, 2, 2]}
{[nil, nil, nil, nil, false, nil, nil, false, false, nil, nil], [4, 1, 2]}
{[nil, nil, false, nil, nil, nil, nil, true, false, nil, true], [5, 2]}
{[true, false, true, nil, nil, false, nil, nil, nil, nil, nil, nil],
 [1, 1, 1, 2]}
{[false, false, true, nil, nil, true, nil, nil, false, nil, nil, nil, nil, nil,
  nil, true, nil, nil, nil], [6, 6]}
{[false, true, nil, false, nil, nil, true, true, nil, nil, nil, false, true,
  nil, true, false], [2, 3, 1, 3]}
{[nil, nil, nil, nil, nil, false, nil, nil, false, nil, nil, nil, nil, nil, nil,
  nil, nil, nil, false, nil], [3, 7]}
{[false, true, true, nil, true, nil, nil, nil, nil, true], [4, 1]}
{[nil, true, nil, nil, nil, true, nil, nil, true, nil, nil, false, true, false,
  nil, true], [2, 1, 3, 1, 1]}
{[nil, nil, nil, nil, nil, nil, true, nil, nil, nil, false], [1, 1, 4]}
{[false, true, nil, nil, true, true, true, nil, nil, nil, nil, nil, true, nil,
  nil], [1, 11]}
{[false, nil, nil, nil, nil, true, nil, nil, nil, nil, nil, true, nil, true,
  true, false, nil, nil, false, false], [10, 2, 1]}
{[nil, nil, false, true, true, nil, false, nil, nil, nil, true, nil, nil, nil,
  nil, false, true], [1, 2, 8, 1]}
{[false, nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, false,
  nil], [1, 1, 4, 1, 1]}
{[nil, true, nil, true, true, nil, false, nil, nil, nil, nil], [4, 1]}
{[false, nil, nil, nil, nil, nil, nil, true, nil, false, nil, true, nil],
 [5, 2]}
{[nil, false, nil, nil, nil, true, true, true, false, nil, nil, nil, nil, false,
  nil, false, nil], [1, 6, 3, 1, 1]}
{[true, true, nil, nil, true, true, nil, nil, nil, nil, nil, nil, nil, nil,
  true, true, nil, true, nil], [7, 1, 6, 1]}
{[nil, nil, true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, true,
  true, nil, nil], [2, 1, 1, 6]}
{[nil, false, nil, nil, false, true, false, nil, nil, true, nil, nil, nil, nil,
  false], [1, 1, 1, 1, 2]}
{[nil, nil, nil, nil, nil, nil, nil, nil, false, nil, nil, true, nil],
 [8, 1, 1]}
{[nil, false, nil, nil, nil, nil, nil, nil, false, true, true, nil, nil, true,
  false, true, nil, false, true], [1, 1, 2, 5, 1, 1]}
{[false, false, nil, true, nil, true, nil, nil, nil, false, nil, nil, false,
  nil, nil, false, nil, nil], [6, 1]}
{[false, nil, nil, nil, nil, true, false, true, true, nil, true, nil, true,
  true, false, true, nil, nil, nil], [1, 1, 1, 7, 1, 2]}
{[nil, nil, true, nil, nil, nil, true, nil, nil, true, nil, true, nil, nil, nil],
 [12, 1]}
{[true, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, true, nil, true,
  nil, nil, nil, nil, nil], [1, 2, 1, 1, 6, 1]}
{[nil, nil, nil, true, false, false, nil, nil, nil, nil, nil, true, nil, nil,
  false], [1, 1, 7]}
{[nil, nil, true, true, nil, nil, nil, true, true, true, nil, nil, false, nil,
  true, nil, true, nil, false, nil], [12, 4, 1]}
{[nil, nil, nil, nil, nil, nil, true, false, nil, true, true, false, nil, true,
  nil, nil, nil, true, nil], [1, 2, 2, 3, 1]}
{[nil, nil, false, nil, nil, false, nil, true, true, nil, nil, nil, nil, nil,
  nil, nil, true, false], [2, 1, 11]}
{[false, nil, nil, true, nil, nil, nil, nil, true, true, nil, nil, nil], [3, 4]}
{[false, nil, nil, true, nil, nil, nil, true, nil, nil, nil, nil, true, nil,
  nil, false, nil], [14, 1]}
{[nil, true, nil, nil, nil, nil, false, false, true, nil, nil, nil, nil, nil,
  nil, false, false], [2, 1, 7]}
```

<!-- livebook:{"output":true} -->

```
[
  ok: 2,
  ok: 6,
  ok: 4,
  ok: 5,
  ok: 2,
  ok: 14,
  ok: 3,
  ok: 3,
  ok: 2,
  ok: 3,
  ok: 4,
  ok: 2,
  ok: 2,
  ok: 2,
  ok: 1,
  ok: 4,
  ok: 2,
  ok: 6,
  ok: 6,
  ok: 2,
  ok: 1,
  ok: 10,
  ok: 3,
  ok: 3,
  ok: 4,
  ok: 3,
  ok: 1,
  ok: 4,
  ok: 2,
  ok: 4,
  ok: 5,
  ok: 2,
  ok: 5,
  ok: 1,
  ok: 8,
  ok: 6,
  ok: 10,
  ok: 4,
  ok: 3,
  ok: 5,
  ok: 53,
  ok: 3,
  ok: 2,
  ok: 4,
  ok: 6,
  ok: 1,
  ok: 18,
  ok: 5,
  ok: 46,
  ok: 30,
  ...
]
```

```elixir
# 7236 is the right answer!
Enum.map(answers, fn {:ok, x} -> x end)
|> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
7236
```

```elixir
# iterate numbers padding them with leading 0 if needed to fit the length
# each possibility is created by adding a given amount of zeros on each empty space
#
# or, try gap length encoding
```

<!-- livebook:{"output":true} -->

```
nil
```

```elixir
# TODO: how to distribute [1, 1] into 0 group above?
# we can compute that 1 + 1 will require 3, so we can take all damaged up to the current point
# up to the threshold defined as the damaged lengths + required spaces 
```

<!-- livebook:{"output":true} -->

```
nil
```

## Tests

```elixir
ExUnit.start(autorun: false)

defmodule D08Test do
  use ExUnit.Case, async: true

  # @test_input1 D08.parse_input("""
  #              RL

  #              AAA = (BBB, CCC)
  #              BBB = (DDD, EEE)
  #              CCC = (ZZZ, GGG)
  #              DDD = (DDD, DDD)
  #              EEE = (EEE, EEE)
  #              GGG = (GGG, GGG)
  #              ZZZ = (ZZZ, ZZZ)
  #              """)

  # @test_input2 D08.parse_input("""
  #              LLR

  #              AAA = (BBB, BBB)
  #              BBB = (AAA, ZZZ)
  #              ZZZ = (ZZZ, ZZZ)
  #              """)

  # @test_input3 D08.parse_input("""
  #              LR

  #              11A = (11B, XXX)
  #              11B = (XXX, 11Z)
  #              11Z = (11B, XXX)
  #              22A = (22B, XXX)
  #              22B = (22C, 22C)
  #              22C = (22Z, 22Z)
  #              22Z = (22B, 22B)
  #              XXX = (XXX, XXX)
  #              """)

  # @input Path.join(__DIR__, "inputs/d08") |> File.read!() |> D08.parse_input()

  # test "part 1 works" do
  #   {moves, network} = @test_input1
  #   assert D08.p1(moves, network) == 2

  #   {moves, network} = @test_input2
  #   assert D08.p1(moves, network) == 6

  #   {moves, network} = @input
  #   assert D08.p1(moves, network) == 19783
  # end

  # test "part 2 works" do
  #   {moves, network} = @test_input3
  #   assert D08.p2(moves, network) == 6

  #   {moves, network} = @input
  #   assert D08.p2(moves, network) == 9_177_460_370_549
  # end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```

Finished in 0.00 seconds (0.00s async, 0.00s sync)
0 failures

Randomized with seed 71107
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 0}
```
